@page "/Conversion"

@using Crypto.Web.Services.Interfaces
@using Crypto.Web.BlazorDTOs.CryptingApp_DTO
@inject HttpClient Http
@inject ICryptoService CryptoService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Resource> localizer

<h3 Style="text-align:center">@localizer["Conversion_title"]</h3>


<div class="container_currency">
    <input placeholder=@localizer["Conversion_input"] @bind="Crypto_value_1" />
    <p class="convert_text">@localizer["Conversion_Choose1"]: @Show_first_currency</p>
    <p class="convert_text">@localizer["Conversion_Choose2"]: @Show_second_currency</p>
    <button class="calculate" @onclick="Calculate"> @localizer["Conversion_button"] </button>
    <p class="convert_text">@Result</p>
</div>






<div class="d-flex flex-wrap  flex-grow-1  justify-space-between" Elevation="0">
    @foreach (var item in composition)
    {
        @if (item.name != "")
        {
            <div class="but" @onclick="@(() => ChooseCurrency(item))">

                <h4>@item.name</h4>

                <h5>$@Math.Round(item.price, 10) </h5>

                @if (item.change_1h < 0)
                {
                    <h6 style="color: Red;">
                        @Math.Round(item.change_1h, 10)%
                    </h6>
                }
                else
                {
                    <h6 style="color: Green;">
                        @Math.Round(item.change_1h, 10)%
                    </h6>
                }
            </div>
        }
    }
</div>




@code {
    double c;
    private IEnumerable<AssetDTO> composition = new List<AssetDTO>();
    AssetDTO Crypto_1;
    AssetDTO Crypto_2;
    string Crypto_value_1;
    string Crypto_value_2;
    int k;
    double result;
    string Result = "";
    string Show_first_currency;
    string Show_second_currency;


    protected override async Task OnInitializedAsync()
    {
        composition = await CryptoService.GetAll();
        //c = composition.ToList().FirstOrDefault().change_1h;
    }


    void ChooseCurrency(AssetDTO item)
    {
        if (k == 0)
        {
            Crypto_1 = item;
            Show_first_currency = item.name;
            k = 1;
        }
        else if (k == 1)
        {
            Crypto_2 = item;
            Show_second_currency = item.name;
            k = 0;
        }
    }



    void Calculate()
    {
        double val1 = Convert.ToDouble(Crypto_value_1);

        if (val1 > 0)
        {
            result = (Crypto_1.price * val1) / (Crypto_2.price);
        }
        Result = Convert.ToString($"{val1} {Crypto_1.name} = {result} {Crypto_2.name} ");
    }


    async void Reset()
    {
        composition = await CryptoService.GetAll();
        StateHasChanged();
    }
}
